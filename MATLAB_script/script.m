%Totem Pole Specs%
Vm = 5;             % PWM maximum value
Vref = 5;           % Reference value corresponding to maximum current
Pout_max = 3600;    % Maximum Power drawn from the converter
Pout_min = 360;     % Minimum Power drawn from the converter (small value)
Vac = 230;          % Nominal RMS value of ac supply
Vacmin = 85;        % Minimum RMS value of aac supply
Vacmax = 265;       % Maximum RMS value of ac supply
fac = 50;           % Nominal frequency of the ac supply
facmin = 45;        % Min frequency of ac supply
facmax = 65;        % Max frequency of ac supply
Vdc_totem = 400;    % DC output of totem pole converter
fs_PFC = 50e3;      % Switching frequency
deli_L = 0.25*sqrt(2)*Pout_max/Vacmax;      % Ripple in inductor current is 25% of maximum line current
delv_dcw = 2;       % Switching ripple
delv_dc2w = 20;     % 2 Line frequency ripple
Imax = sqrt(2)*Pout_max/Vacmin;         %Maximum peak current
Inom = sqrt(2)*Pout_max/Vac;            % Nominal peak current
kx = 50.1;                            % A set value of kx to have a 12V control voltage at nominal current and maximum power 


Reff = Vdc_totem*Vdc_totem/Pout_max;        % Only for totempole simulation purposes
L_totem = Vdc_totem/4/fs_PFC/deli_L;        % Design of inductor of totem pole converter.
C_totem = (Pout_max/delv_dc2w/Vdc_totem/(2*pi*facmin));      % Capacitor design (switching+2w)

%Bode options initialisation and setup
opts = bodeoptions;
opts.freqUnits = 'Hz';
opts.Grid = 'on';
opts.XLim = [1,10e3];
opts.YLimMode = 'auto';
s = tf('s');


Gid = Vdc_totem/s/L_totem;          % Gid of totem pole
Rsense = Vref/Imax;                 % Determining sense resistor value
Vcontrol  = Pout_max*2*Rsense/(kx); % Determining Vcontrol (Later will be generated by the voltage loop)
Tui_totem = Gid*Rsense*1/Vm;        % Uncompensated current loop gain og totem pole PFC
fc = fs_PFC/10;                     % Crossover frequency of current loop of PFC 

% PI compensator design
wL = 2*pi*fc*tan(40*pi/180);        % Zero of the controller
Gcinf = 2*pi*fc*L_totem*Vm/Rsense/Vdc_totem/sqrt(1+(wL/2/pi/fc)^2);         % High frequency gain of PI compensator
Gci = Gcinf*(1+wL/s);               % Transfer function of PI compensator
Ti_totem = Tui_totem*Gci;           % Compensated loop gain for plotting bode plots

H = Vref/Vdc_totem;
y = kx/(2*Rsense*Vdc_totem);        % Voltage loop parameter y
Reff_min = Vdc_totem*Vdc_totem/Pout_max;        % Determined min and max effective load
Reff_max = Vdc_totem*Vdc_totem/Pout_min;
Gvv0 =  y*Reff_min/2;                   % DC gain of voltage loop
Gvv1 = Gvv0/(1+s*Reff_min*C_totem/2);   % Transfer function of voltage loop
Gvv0 =  y*Reff_max/2;
Gvv2 = Gvv0/(1+s*Reff_max*C_totem/2);

Tuv1 = Gvv1*H; 
% Bode plot
% bode(Gvv1*H,opts);
% hold on;
% bode(Gvv2*H,opts);
% legend('Rmin','Rmax');


Tuv = Gvv2*H;
fcv = 20;
% Voltage controller
wLvv = 2*pi*fcv*tan(35.28*pi/180);
Gcvinf = 2*pi*fcv*C_totem/y/H/sqrt(1+(wLvv/2/pi/fcv)^2);
Gcv = Gcvinf*(1+wLvv/s);
Gbandpass = (s/2/2/pi/100)/(1+s/2/2/pi/100 + (s/2/pi/100)^2);
Gnotch = 1-Gbandpass;
Tvv = Tuv*Gcv;
% bode(Tvv,opts);

%PSFB converter design
Vin_PSFB = 400;
Vout_min = 200;
Vout_max = 336;
Vout_nom = 296;
n = 1;
L_PSFB = 370.410e-6;
C_PSFB = 1.6875e-6;
Rout_max = 336*336/360;
Rout_min = 200*200/3600;
I0max = Pout_max/Vout_min;
Rsense_PSFB = Vref/I0max;

opts.XLim = [10,1e8];
Gid1 = n*Vin_PSFB*(1+s*Rout_min*C_PSFB)/(L_PSFB*C_PSFB*s^2 + s*L_PSFB/Rout_min + 1)/Rout_min;
Gid2 = n*Vin_PSFB*(1+s*Rout_max*C_PSFB)/(L_PSFB*C_PSFB*s^2 + s*L_PSFB/Rout_max + 1)/Rout_max;
% bode(Gid1,Gid2,opts);
Tui1_PSFB = Gid1*Rsense_PSFB*1/Vm;
Tui_PSFB = Gid2*Rsense_PSFB*1/Vm;
fci_PSFB = 20e3;
wLi_PSFB = 2*pi*fci_PSFB*tan(40*pi/180);
Gci_inf = 2*pi*fci_PSFB*L_PSFB*Vm/Rsense_PSFB/Vin_PSFB/sqrt(1+(wLi_PSFB/2/pi/fci_PSFB)^2);
Gci_PSFB = Gci_inf*(1+wLi_PSFB/s);
Ti1_PSFB = Tui_PSFB*Gci_PSFB;
Ti2_PSFB = Gci_PSFB*Gid1*Rsense_PSFB*1/Vm;
% bode(Ti1_PSFB,Ti2_PSFB,opts);

Gvv1_PSFB = Rout_max/Rsense_PSFB/(1+s*Rout_max*C_PSFB);
Gvv2_PSFB = Rout_min/Rsense_PSFB/(1+s*Rout_min*C_PSFB);
% bode(Gvv1_PSFB, Gvv2_PSFB, opts);

H_PSFB = Vref/Vout_max;
Tuv_PSFB = Gvv1_PSFB*H_PSFB;
fcv_PSFB = fci_PSFB/10;
phiTu = angle(evalfr(Tuv_PSFB,1i*2*pi*fcv_PSFB));
phiD = (130*pi/180)+phiTu;
wLv_PSFB = 2*pi*fcv_PSFB*tan(phiD);
Gcv_inf = Rsense_PSFB*C_PSFB*2*pi*fcv_PSFB/H_PSFB/sqrt(1+(wLv_PSFB/2/pi/fcv_PSFB)^2);
Gcv_PSFB = Gcv_inf*(1+wLv_PSFB/s);
Tiv = Tuv_PSFB*Gcv_PSFB;
% bode(Tiv, Gcv_PSFB*Gvv2_PSFB*H_PSFB,opts);
